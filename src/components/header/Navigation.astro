---
import { t } from 'static/i18n';

const groups = [
	[
		{
			title: t('Apply for funding'),
			text: t('Founders'),
			href: '#founders'
		},
		{
			title: t('Our Ecosystem'),
			text: t('Ecosystem'),
			href: '#ecosystem'
		},
	],
	[
		{
			title: t('Our Team'),
			text: t('Team'),
			href: '#team'
		},
		{
			title: t('Our Portfolio'),
			text: t('Portfolio'),
			href: '#portfolio'
		}
	],
	[
		{
			title: t('Latest News'),
			text: t('News'),
			href: '#news'
		},
		{
			title: t('Official Events'),
			text: t('Events'),
			href: '#events'
		}
	]
]
---
<nav-collabsible {...Astro.props}>
	<h3 class="nav-subtitle">
		{t('Backing deep science for a better future.')}
	</h3>
	<p class="nav-link-groups">
		{groups.map((group) => (
			<span class="nav-link-group">
				{group.map(({ title, text, href }) => (
					<a class="nav-link" href={href} title={title}>{text}</a>
				))}
			</span>
		))}
	</p>
</nav-collabsible>

<style>
	nav-collabsible {
		padding: 0 var(--gutter-width) var(--row-gap);
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		position: relative;
		z-index: 1;
		background-color: var(--color-secondary);
		width: 100%;
	}
	h3 {
		max-width: 19.2rem;
	}
	p {
		display: flex;
		flex-direction: row;
		column-gap: 2rem;
		padding: 0.5rem 0;
	}
	p span {
		display: flex;
		flex-direction: column;
		row-gap: 0.25rem;
	}
</style>
<script>
	class CollapsibleNav extends HTMLElement {
		private lastScrollY: number;
		private scrollTimeout: number | null;

		constructor() {
			super();
			this.lastScrollY = 0;
			this.scrollTimeout = null;
			this.style.marginTop = '0px';
			this.style.transition = 'margin-top 0.2s ease, border-bottom 0.2s ease';
		}

		connectedCallback() {
			window.addEventListener('scroll', this.debouncedOnScroll);
		}

		disconnectedCallback() {
			window.removeEventListener('scroll', this.debouncedOnScroll);
		}

		debouncedOnScroll = (e) => {
			if (this.scrollTimeout === null || window.scrollY === 0) {
				this.onScroll(); // Call on the first event
				this.scrollTimeout = window.setTimeout(() => {
					this.scrollTimeout = null; // Reset timeout after delay
				}, 250);
			}
		};

		onScroll = () => {
			const currentScrollY = window.scrollY;

			// Determine if the navigation should be hidden or shown
			if (currentScrollY > this.lastScrollY) {
				// Scrolling down, hide the navigation
				this.style.marginTop = `-${this.offsetHeight}px`;
			} else {
				// Scrolling up, show the navigation
				this.style.marginTop = '0px';
			}

			// Adjust the box shadow opacity based on scroll position
			const maxOpacity = 0.4; // Maximum opacity for the box shadow
			const borderOpacity = Math.min(maxOpacity, currentScrollY / 100); // Adjust the divisor to control fade speed
			if (this.parentElement?.parentElement)
				this.parentElement.parentElement.style.borderBottom = `solid 1px rgba(0, 0, 0, ${borderOpacity})`;

			this.lastScrollY = currentScrollY;
		};
	}

	customElements.define('nav-collabsible', CollapsibleNav);
</script>
