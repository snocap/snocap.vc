---
import { t } from "utils/i18n";
import { partners } from "data/ecosystem";
import type { EcosystemPartnerKey } from "data/ecosystem";
import Button from "components/button/Button.astro";

let selected: EcosystemPartnerKey = Astro.props.selected ?? partners[0].id;
---

<ecosystem-slideshow selected={selected} class="ecosystem-slideshow">
  <div class="ecosystem-selector">
    <div class="gutter">
      <small class="vertical-rl">{t("Our Ecosystem")}</small>
    </div>
    <div class="ecosystem-slider">
      {
        partners.map(({ id, name, tabImage }) => (
          <a
            href={`#${id}`}
            title={t("Learn more about {name}", { name })}
            class:list={["selector-tab", { selected: id === selected }]}
          >
            <img src={tabImage} alt={t("{name}'s Logo", { name })} />
          </a>
        ))
      }
    </div>
  </div>
  <div class="ecosystem-preview">
    {
      partners.map(({ id, name, link, tags, description, previewImage }) => (
        <div
          id={id}
          class:list={["partner-preview", { selected: id === selected }]}
        >
          <div class="partner-details">
            <h5>{name}</h5>
            <a
              title={t("Visit {name}", { name })}
              class="partner-link"
              href={link}
            >
              {link.replace(/^.*\W(\w+?\.\w+$)/, "$1").toLowerCase()}
            </a>
            <div class="partner-tags">
              {tags.map((tag) => (
                <Button disabled>{t(tag)}</Button>
              ))}
            </div>
            <p set:html={t(description).trim().replace(/\n/g, "<br>")} />
          </div>
          <div class="partner-preview-image">
            <img alt={t("{name} Preview Image", { name })} src={previewImage} />
          </div>
        </div>
      ))
    }
  </div>
</ecosystem-slideshow>

<style>
  .ecosystem-selector {
    display: flex;
    flex-direction: row;
    border: solid 1px var(--color-primary);
  }
	/* note: this should really be tied to --maxWidth but you can't use vars in media queries */
  @media (max-width: 1440px) {
    .ecosystem-selector {
      border-right: none 0;
      border-left: none 0;
    }
  }
  .ecosystem-slider {
    flex-grow: 1;
    display: flex;
    flex-direction: row;
    overflow-x: auto;
    column-gap: 5.75rem;
    align-items: center;
    padding: 0 4rem;
    scrollbar-width: thin;
    scrollbar-color: rgba(0, 0, 0, 0.2) transparent;
  }
  .selector-tab {
    display: flex;
    flex-direction: column;
    opacity: 0.5;
    transition: opacity 0.3s;
  }
  .selector-tab.selected,
  .selector-tab.selected:hover {
    opacity: 1;
  }
  .selector-tab:hover {
    opacity: 0.8;
  }
  .selector-tab img {
    max-width: 16rem;
    min-width: 11rem;
  }
  .gutter {
    display: flex;
    flex-direction: row;
    justify-content: center;
    flex-grow: 1;
    width: var(--gutter-width);
    border-right: solid 1px var(--color-primary);
    padding: 1rem 2rem;
  }
  .partner-preview {
    flex-direction: row;
    column-gap: 1rem;
    padding: 1rem var(--gutter-width);
    display: none;
  }
  .partner-preview.selected {
    display: flex;
  }
  .partner-tags {
    display: flex;
    flex-direction: row;
    column-gap: 0.5rem;
    padding: 0.5rem 0;
  }
  .partner-preview-image,
  .partner-details {
    flex: 1;
  }
  .partner-details,
  .partner-preview-image img {
    border: solid 1px var(--color-tertiary);
  }
  .partner-preview-image img {
    width: 100%;
    object-fit: cover;
    filter: grayscale(1);
    transition: filter 0.3s;
  }
  .partner-preview-image img:hover {
    filter: grayscale(0);
  }
  .partner-details {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 1.375rem;
    row-gap: 0.75rem;
    align-items: flex-start;
  }
  .partner-link:hover {
    text-decoration: underline;
  }
</style>

<script>
  class EcosystemSlideshow extends HTMLElement {
    selected: string;
		previously: string;

    constructor() {
      super();
      this.selected = this.getAttribute("selected") || "";
			this.previously = this.selected;
    }

    connectedCallback() {
      this.updateSelectedFromHash();
      window.addEventListener("hashchange", this.onHashChange);
    }

    disconnectedCallback() {
      window.removeEventListener("hashchange", this.onHashChange);
    }

    onHashChange = () => {
      this.updateSelectedFromHash();
    };

    updateSelectedFromHash() {
      const hash = window.location.hash.replace("#", "");
      if (hash) {
				this.previously = this.selected;
        this.selected = hash;
        this.updateSelectedElements();
      }
    }

    updateSelectedElements() {
      const tabs = this.querySelectorAll(".selector-tab");
      const previews = this.querySelectorAll(".partner-preview");

      tabs.forEach((tab) => {
        tab.classList.toggle(
          "selected",
          tab.getAttribute("href") === `#${this.selected}`
        );
      });

      previews.forEach((preview) => {
        preview.classList.toggle("selected", preview.id === this.selected);
      });

			// check if nothing is selected, and select the first
			if (this.querySelector(".selector-tab.selected") === null) {
				if (this.selected === this.previously) {
					this.selected = this.querySelector(".selector-tab")?.getAttribute("href")?.replace("#", "") ?? "";
					this.updateSelectedElements();
				} else {
					this.selected = this.previously;
					this.updateSelectedElements();
				}
			}
    }
  }

  customElements.define("ecosystem-slideshow", EcosystemSlideshow);
</script>
